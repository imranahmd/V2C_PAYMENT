<%@ include file="/include.jsp"%>
<%@page import="com.rew.pg.dto.SbiAquiringDTO"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="org.json.JSONObject"%>
<%@page import="com.rew.payment.utility.PGUtils"%>
<%@page import="com.rew.pg.dto.TransactionMaster"%>
<%@page import="com.rew.pg.db.DataManager"%>
<%@ page language="java" session="true"%>
<%@ page import="java.util.StringTokenizer"%>
<%@ page import="java.util.Random"%>
<%@ page import="java.util.Date"%>
<%@ page import="java.io.*"%>
<%@ page import="java.io.BufferedInputStream"%>
<%@ page import="java.io.BufferedReader"%>
<%@ page import="java.io.DataOutputStream"%>
<%@ page import="java.io.File"%>
<%@ page import="java.io.FileInputStream"%>
<%@ page import="java.io.FileOutputStream"%>
<%@ page import="java.io.InputStream"%>
<%@ page import="java.io.InputStreamReader"%>
<%@ page import="java.io.PrintStream"%>
<%@ page import="java.net.URL"%>
<%@ page import="java.net.URLConnection"%>
<%@ page import="java.util.HashMap"%>
<%@ page import="java.util.zip.ZipEntry"%>
<%@ page import="java.util.zip.ZipFile"%>
<%@ page import="javax.net.ssl.HttpsURLConnection"%>
<%@ page import="java.net.HttpURLConnection"%>
<%@ page import="java.util.*"%>
<%@ page import="com.fss.plugin.iPayPipe"%>
<%@page import="org.slf4j.Logger"%>
<%@page import="org.slf4j.LoggerFactory"%>

<%
	log.info("inside SBIRedirect.jsp");
	TransactionMaster TM = null;
	String encRespXML = null;
	String pgTrackId = null;
	String spErrorCode = "NA";
	String errorCode = "NA";
	String respMessage = "NA";
	DataManager dm = new DataManager();
	Logger log = LoggerFactory.getLogger("JSPS.SBIRedirect.jsp");

	JSONObject errorCodeJSON = null;
	String errorCodeDesc = null;
	
	try {
		String err[] = null;
		String trandata = request.getParameter("trandata");

		log.info(">>>>>>>>>>>>>>>>>>SBIRedirect.jsp | Response | before parsing | trandata=" + trandata);
		log.info(">>>>>>>>>>>>>>>>>> SBIRedirect.jsp | Response | ErrorText | ErrorText="
				+ request.getParameter("ErrorText"));
		if (trandata != null) {
			
			String Mid = (String) request.getParameter("merchantId");
			log.info("Mid:::   " + Mid);
			
			SbiAquiringDTO sbiaquiringdetails  = dm.getSBIAquiringDetails(Mid);
			String aliasName=sbiaquiringdetails.getAliasName();
			String resourcePath=sbiaquiringdetails.getKeyPath();

			iPayPipe pipe = new iPayPipe();
			//String resourcePath = PGUtils.getPropertyValue("resourcePath");
			//String keystorePath = PGUtils.getPropertyValue("keystorePath");
			//String aliasName = PGUtils.getPropertyValue("aliasName");
			String recieptURL = PGUtils.getPropertyValue("merchantResponseUrlsbiRupay");//" https://hdfcprodsigning.in/payment/merchantResponse.jsp" ; //"https://certpayments.onlinesbi.com/sbi_test_integration/returnPage.jsp"; //"http://localhost:8084/sbi_test_integration/returnPage.jsp"; // Mandatory //SBI: Kindly set the request URL. (i.e: http://localhost:8084/sbi_test_integration/returnPage.jsp" )
			String errorURL = PGUtils.getPropertyValue("merchantResponseUrlsbiRupay"); //"https://certpayments.onlinesbi.com/sbi_test_integration/error.jsp"; //"http://localhost:8084/sbi_test_integration/returnPage.jsp"; // Mandatory //SBI: Kindly set the Response URL. (i.e: http://localhost:8084/sbi_test_integration/returnPage.jsp" )
			String action = PGUtils.getPropertyValue("action");

			pipe.setResourcePath(resourcePath);
			pipe.setKeystorePath(resourcePath);
			pipe.setAlias(aliasName);

			int result = pipe.parseEncryptedResult(trandata);
			log.info("After decryption ... result=" + result + " ErrorText=="
					+ request.getParameter("ErrorText"));

			if (result == 0 && request.getParameter("ErrorText") == null) {

				//DECRYPT RESPONSE
				// To get Track ID 
				pgTrackId = pipe.getTrackId();
				log.info(">>>getTrackId=" + pipe.getTrackId());

				// To get result. Value "CAPTURED" is success and other values must be treated as failure. 
				String pgResult = pipe.getResult();
				log.info("for id=" + pgTrackId + ">>>pgResult=" + pgResult);

				//To get payment ID. Generated by Payment Gateway. 
				String pgPaymentId = pipe.getPaymentId();
				log.info("for id=" + pgTrackId + ">>>getPaymentId=" + pipe.getPaymentId());

				//To get Transaction ID. 
				String pgTransId = pipe.getTransId();
				log.info("for id=" + pgTrackId + ">>>getTransId=" + pipe.getTransId());

				// To get Amount 
				String pgAmt = pipe.getAmt();
				log.info("for id=" + pgTrackId + ">>>getAmt=" + pipe.getAmt());

				// To get RRN  No 
				String pgRef = pipe.getRef();
				log.info("for id=" + pgTrackId + ">>>getRef=" + pipe.getRef());

				// To get Error 
				String pgError = pipe.getError();
				log.info("for id=" + pgTrackId + ">>>getError=" + pipe.getError());

				// To get Error description 
				String pgError_text = pipe.getError_text();
				log.info("for id=" + pgTrackId + ">>>getError_text=" + pipe.getError_text());

				//Collects Any error in initial Request using GetTextBetweenTags() function
				String strError = pgError;

				//Result response recieved from PG is stored in variable responseCode
				String responseCode = pgResult;
				String message = pgError_text;

				log.info("for id=" + pgTrackId + "ipaySBI | STATUS FROM PG = " + responseCode);

				TM = dm.getTxnMaster(pgTrackId);
				String spId = TM.getProcessId();
				if (responseCode.equalsIgnoreCase("CAPTURED")) {
					log.info("for id=" + pgTrackId
							+ "respHandlersbi ::: ===================Success ================calling dual verification");
					iPayPipe pipe1 = new iPayPipe();

					String requeryAction = PGUtils.getPropertyValue("requeryAction");
					String currency = PGUtils.getPropertyValue("currency");
					String type = null;
					log.info("TM.getInstrumentId()="+TM.getInstrumentId()+" TM.getBankId()="+TM.getBankId());
					if (TM.getInstrumentId().equalsIgnoreCase("CC")) {
						type = "C";
					} 
					else if(TM.getInstrumentId().equalsIgnoreCase("DC"))
					{
						if (TM.getBankId().equalsIgnoreCase("Rupay"))
							type = "RDC";
						else
							type = "D";
					}

					pipe1.setTrackId(pgTrackId);
					pipe1.setAlias(aliasName);
					pipe1.setResourcePath(resourcePath);
					pipe1.setAction(requeryAction);
					pipe1.setAmt(pgAmt);
					pipe1.setCurrency(currency);
					pipe1.setType(type);
					pipe1.setTransId(pgTrackId);
					pipe1.setUdf5("TrackID");
					pipe1.setKeystorePath(resourcePath);
					pipe1.setResponseURL(recieptURL);
					pipe1.setErrorURL(errorURL);

					int res = pipe1.performTransaction();
					String resp_date_Time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
					log.info("for id=" + pgTrackId + "result after dual verification =" + res);
					if (res == 0) {

						String Result = pipe1.getResult(); // gives the value in the tag 
						String PostDate = pipe1.getDate(); // contains post date 
						String refNum = pipe1.getRef(); // contains RRN no generated by PG 
						String trackId = pipe1.getTrackId(); // contains merchant track ID 
						String tranId = pipe1.getTransId(); // contains PG Transaction ID                                            
						String amt = pipe1.getAmt(); // contains transaction amount 
						String paymentId = pipe1.getPaymentId(); // contains payment ID 
						String auth = pipe1.getAuth(); // contains Auth code 
						String errorText = pipe1.getError_text(); // contains get Error Text 
						String error = pipe1.getError(); // contains get Error Text 

						log.info("for id=" + trackId + " Result=" + Result + " PostDate=" + PostDate
								+ " refNum=" + refNum + " trackId=" + trackId + " tranId=" + tranId + " amt="
								+ amt + " paymentId=" + paymentId + " auth=" + auth + " errorText=" + errorText
								+ " error=" + error);

						if (Result.equalsIgnoreCase("APPROVED") || Result.equalsIgnoreCase("CAPTURED")
								|| Result.equalsIgnoreCase("SUCCESS")) {
							Result = "Ok";
							errorCode = "00000";
							spErrorCode = "00000";
							message = "Transaction Successful.";

							TM = getTransactionMaster(trackId, Result, refNum, tranId, paymentId, "1",
									errorCode, spErrorCode, message, resp_date_Time, "SBIRedirect",
									resp_date_Time, TM);

							updateTransaction(TM, dm, request, response);

						} else {

							try {
								if (error.contains("-")) {
									err = error.split("-");
									spErrorCode = err[0];
									respMessage = err[1];
									errorCodeJSON = dm.getErrorCode(spErrorCode, spId);

								} else {
									log.info("pgError==>" + pgError + " spid=" + spId);
									errorCodeJSON = dm.getSBIErrorCode(error, spId);

								}

							} catch (Exception e) {
								log.info("for id=" + pgTrackId + " Error occurred fetching errorcodes"
										+ e.getMessage());
							}

							errorCode = errorCodeJSON.getString("aggErrorCode");
							respMessage = errorCodeJSON.getString("aggErrorDesc");

							TM = getTransactionMaster(trackId, "F", refNum, tranId, paymentId, "1", errorCode,
									spErrorCode, respMessage, resp_date_Time, "SBIRedirect", resp_date_Time,
									TM);

							updateTransaction(TM, dm, request, response);
						}

					} else {

						log.info("for id=" + pgTrackId + " >>>>>>>>>>> After Dual Verification result is not 0 "
								+ pipe1.getError());

						try {
							if (pipe1.getError().contains("-")) {
								err = pipe1.getError().split("-");
								spErrorCode = err[0];
								respMessage = err[1];
								errorCodeJSON = dm.getErrorCode(spErrorCode, spId);

							} else {
								log.info("pgError==>" + pgError + " spid=" + spId);
								errorCodeJSON = dm.getSBIErrorCode(pipe1.getError(), spId);

							}

						} catch (Exception e) {
							log.info("Error occurred fetching errorcodes" + e.getMessage());
						}

						errorCode = errorCodeJSON.getString("aggErrorCode");
						respMessage = errorCodeJSON.getString("aggErrorDesc");

						TM = getTransactionMaster(pgTrackId, "F", pgRef, pgTransId, pgPaymentId, "1", errorCode,
								spErrorCode, respMessage, resp_date_Time, "SBIRedirect", resp_date_Time, TM);

						updateTransaction(TM, dm, request, response);
					}

				} else if (!responseCode.equalsIgnoreCase("CAPTURED")) {

					log.info("for id=" + pgTrackId
							+ "inside not captured ------+++++++******************** yaha tak aaaya ");
					try {
						if (pgError.contains("-")) {
							err = pgError.split("-");
							spErrorCode = err[0];
							respMessage = err[1];
							errorCodeJSON = dm.getErrorCode(spErrorCode, spId);
						} else {
							log.info("pgError==>" + pgError + " spid=" + spId);
							errorCodeJSON = dm.getSBIErrorCode(pgError, spId);
						}
					} catch (Exception e) {
						log.info("Error occurred fetching errorcodes" + e.getMessage());
					}

					errorCode = errorCodeJSON.getString("aggErrorCode");
					respMessage = errorCodeJSON.getString("aggErrorDesc");

					log.info("errorCode=" + errorCode + " respMessage=" + respMessage);
					String resp_date_Time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

					log.info("resp status===>" + TM.getRespStatus());
					TM = getTransactionMaster(pgTrackId, "F", pgRef, pgTransId, pgPaymentId, "1", errorCode,
							spErrorCode, respMessage, resp_date_Time, "SBIRedirect", resp_date_Time, TM);

					updateTransaction(TM, dm, request, response);

				}

			} else if (request.getParameter("ErrorText") != null) {
				log.info("ErrorText is not null " + request.getParameter("ErrorText"));
				request.setAttribute("errorMsg", "Error 10052 :  Error while Processing Transcation Request '");
				request.getRequestDispatcher("txnValidationErrors.jsp").include(request, response);

			} else if (result != 0) {
				log.info("result is not equals 0 " + pipe.getError());
				request.setAttribute("errorMsg", "Error 10052 :  Error while Processing Transcation Request '");
				request.getRequestDispatcher("txnValidationErrors.jsp").include(request, response);

			}
		} else {
			log.info("Trandata is null " + trandata);
			request.setAttribute("errorMsg", "Error 10052 :  Error while Processing Transcation Request '");
			request.getRequestDispatcher("txnValidationErrors.jsp").include(request, response);
		}

	} catch (Exception e) {
		log.info("for id=" + pgTrackId + "SBIRedirect.jsp ::: Error Occurred :: " + e.getMessage());
		String resp_date_Time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
		TM = getTransactionMaster(pgTrackId, "F", "NA", "NA", "NA", "1", "FFFFF", "NA",
				"Transaction Failed.Undefined Error.", resp_date_Time, "SBIRedirect", resp_date_Time, TM);

		updateTransaction(TM, dm, request, response);

	}
%>
<%!
Logger log = LoggerFactory.getLogger("JSPS.SBIRedirect.jsp");
	public TransactionMaster getTransactionMaster(String id, String transstatus, String rrn, String txnid,
			String authid, String respstatus, String errorcode, String sperrorcode, String respmsg, String respdt,
			String modifiedby, String modifiedon, TransactionMaster TM) {
		TM.setId(id);
		TM.setTransStatus(transstatus);
		TM.setServiceRRN(rrn);
		TM.setServiceTxnId(txnid);
		TM.setServiceAuthId(authid);
		//TM.setRespStatus(respstatus);
		TM.setErrorCode(errorcode);
		TM.setSpErrorCode(sperrorcode);
		TM.setRespMessage(respmsg);
		TM.setRespDateTime(respdt);
		TM.setModified_By(modifiedby);
		TM.setModified_On(modifiedon);

		return TM;
	}

	public void updateTransaction(TransactionMaster TM, DataManager dm, HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		log.info("TM.getRespStatus() ==== " + TM.getRespStatus());
		if (!TM.getRespStatus().equalsIgnoreCase("1")) {
			TM.setRespStatus("1");
			dm.updateTxn(TM);
			request.setAttribute("ResTrackId", TM.getId());

			request.getRequestDispatcher("/respHandlersbi").include(request, response);
		}

		else {
			log.info("for id=" + TM.getId()
					+ "SBIRedirect.jsp :::  Error while Processing Transcation Request in catch block");
			request.setAttribute("errorMsg", "Error 10052 :  Error while Processing Transcation Reques");
			request.getRequestDispatcher("txnValidationErrors.jsp").include(request, response);
		}
	}%>

<html>
<head>
<title>Merchant Redirector</title>
<script type="text/javascript">
	//history.forward();
	function redirectRequest() {
		document.RedirectForm.submit();
	}
</script>
</head>
<body onload="redirectRequest();">

	<form name="RedirectForm" action="<%=TM.getReturn_url()%>"
		method="post">
		<table width="80%" align="center" border="0" cellpadding='0'
			cellspacing='0'>
			<tr>
				<td colspan="2">&nbsp;</td>
			</tr>
			<tr>
				<td colspan="2">&nbsp;</td>
			</tr>
			<tr>
				<td colspan="2">&nbsp;</td>
			</tr>
			<tr>
				<td colspan="2" align="center" bgcolor='#FCF3CF'>
					<h5>
						<strong>Please do not click Back/Refresh button while
							Redirecting.</strong>
					</h5>
				</td>
			</tr>
			<!-- 			response.sendRedirect(+"?merchantId="+TM.getMerchantId()+"&respData="+encRespXML); 
 -->
			<tr>
				<td><input type="hidden" name="respData"
					value="<%=encRespXML%>"></td>
			</tr>
			<tr>
				<td><input type="hidden" name="merchantId"
					value="<%=TM.getMerchantId()%>"></td>
			</tr>
			<tr>
				<td colspan="2">&nbsp;</td>
			</tr>
			<!-- <tr>
                	<td colspan="2" align="center"><input type="submit" name="submit" value="Submit Request" /></td>
                </tr> -->
		</table>
	</form>



</body>

</html>
